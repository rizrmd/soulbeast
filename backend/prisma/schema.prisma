// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String          @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  inventory     Inventory[]
  soulbeasts    SoulBeast[]
  battleHistory BattleHistory[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Inventory {
  id        String   @id @default(cuid())
  userId    String
  itemSlug  String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemSlug])
  @@map("inventory")
}

model SoulBeast {
  id         String   @id @default(cuid())
  userId     String
  beastSlug  String
  name       String?
  level      Int      @default(1)
  experience Int      @default(0)
  health     Int
  maxHealth  Int
  attack     Int
  defense    Int
  speed      Int
  element    String
  abilities  Json // Store ability configuration as JSON
  equipment  Json? // Store equipped items as JSON
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("soulbeast")
}

model BattleHistory {
  id           String   @id @default(cuid())
  userId       String
  opponentId   String?
  battleType   String // "pve", "pvp", "tournament", etc.
  result       String // "win", "loss", "draw"
  playerTeam   Json // Store player's team configuration
  opponentTeam Json? // Store opponent's team (null for PvE)
  duration     Int? // Battle duration in seconds
  experience   Int      @default(0)
  rewards      Json? // Store rewards earned
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("battle_history")
}
